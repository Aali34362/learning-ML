using Bogus;
using Dumpify;
using Microsoft.ML;
using MLNetCrashCourse.Model;
using MLNetCrashCourse.Response;

namespace MLNetCrashCourse.TutorialsTeam;

public class Demo
{
    public static void Execute()
    {
        var inputModelFaker = SeedData();
        var fakeInputModel = inputModelFaker.Generate(1000);

        //Data Loading and Transformation:
        //This initializes the machine learning context to access ML.NET APIs.
        MLContext context = new();

        //The fakeInputModel list generated by Faker is converted to an IDataView, which is the data format ML.NET uses internally.
        IDataView trainingData = context.Data.LoadFromEnumerable(fakeInputModel);

        //Feature Engineering:
        //The Concatenate method is used to specify which columns in your dataset are the features.
        //In this case, you're using "YearsOfExperience" as the only feature.
        //The resulting feature column is called "Features".
        var estimator = context.Transforms.Concatenate("Features", new[] { "YearsOfExperience" });

        //Model Building (Training):
        //You're using a pipeline that first concatenates the features and then applies the Stochastic Dual Coordinate Ascent (SDCA) regression algorithm.
        //The label (what you’re predicting) is the "Salary" column.
        //The model will iterate a maximum of 100 times to find the optimal regression coefficients.
        var pipeline = estimator.Append(context.Regression.Trainers.Sdca(labelColumnName:"Salary", maximumNumberOfIterations: 100));

        //Model Fitting:
        //The model is trained on the synthetic dataset by fitting the pipeline to the data.
        var model = pipeline.Fit(trainingData);

        //Prediction:
        //The PredictionEngine is created for single prediction scenarios (low-latency, real-time predictions).
        var predictionEngine = context.Model.CreatePredictionEngine<InputModel, ResultModel>(model);

        var experience = new InputModel { YearsOfExperience = 5 };

        //You create a new instance of InputModel with YearsOfExperience = 5 and pass it to the Predict method.
        //This returns a ResultModel, which contains the predicted salary.
        var result = predictionEngine.Predict(experience);

        //The predicted salary for 5 years of experience is printed to the console.
        $"Approx Salary from {experience.YearsOfExperience} Years of experience will be : {result.Salary}".Dump();
    }

    public static void SuggestedExecute()
    {
        /*
         * Model Evaluation:
         * Consider splitting the data into a training and testing set using TrainTestSplit to evaluate the model's performance.
         * Normalization:
         * If the features have a wide range of values, adding normalization (NormalizeMinMax or NormalizeMeanVariance) might improve model performance.
         * Multiple Features:
         * In real-world scenarios, salary prediction would likely involve multiple features (e.g., education level, location). 
         * You can easily add more features to the pipeline by concatenating more columns.
         */
        var inputModelFaker = SeedData();
        var fakeInputModel = inputModelFaker.Generate(1000);

        MLContext context = new();

        IDataView trainingData = context.Data.LoadFromEnumerable(fakeInputModel);

        // Define pipeline
        var estimator = context.Transforms.Concatenate("Features", new[] { "YearsOfExperience" })
            .Append(context.Regression.Trainers.Sdca(labelColumnName: "Salary", maximumNumberOfIterations: 100));

        var model = estimator.Fit(trainingData);

        // Create a prediction engine
        var predictionEngine = context.Model.CreatePredictionEngine<InputModel, ResultModel>(model);

        // Example input
        var experience = new InputModel { YearsOfExperience = 5 };

        // Predict
        var result = predictionEngine.Predict(experience);

        // Output
        $"Approx Salary from {experience.YearsOfExperience} Years of experience will be : {result.Salary}".Dump();
    }

    public static Faker<InputModel> SeedData() =>
         new Faker<InputModel>()
            .RuleFor(i => i.YearsOfExperience, f => f.Random.Float(0, 40))
            .RuleFor(i => i.Salary, f => (float)f.Finance.Amount(30000, 200000));
    
}
